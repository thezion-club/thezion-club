name: Docker Build and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      deploy_main:
        description: 'Deploy main branch image'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-tag:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit
            network=host

      - name: Check disk space
        run: df -h

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get and Update Version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          sed -i "s/'version' => '.*'/'version' => '$VERSION'/g" config/app.php
          echo "Updated version to: $VERSION"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,prefix=
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CACHEBUST=${{ github.sha }}
            REPO_URL=https://github.com/${{ github.repository }}
            BRANCH_NAME=${{ github.ref_name }}
          provenance: false
          outputs: type=registry,push=true
          allow: |
            network.host

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image
        if: steps.build-and-push.outputs.digest != ''
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes "{}@${{ steps.build-and-push.outputs.digest }}"

      - name: Cleanup untagged images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          package-type: 'container'
          delete-only-untagged-versions: true

      - name: Delete old images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          package-type: 'container'
          min-versions-to-keep: 10

  build-main:
    if: (github.ref == 'refs/heads/main' && github.event.head_commit && contains(github.event.head_commit.message, '[deploy]')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_main == 'true')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit
            network=host

      - name: Check disk space
        run: df -h

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get and Update Version
        id: get_version
        run: |
          VERSION=$(date '+%Y%m%d')-$(git rev-parse --short HEAD)
          sed -i "s/'version' => '.*'/'version' => '$VERSION'/g" config/app.php
          echo "Updated version to: $VERSION"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.version }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CACHEBUST=${{ github.sha }}
            REPO_URL=https://github.com/${{ github.repository }}
            BRANCH_NAME=${{ github.ref_name }}
          provenance: false
          outputs: type=registry,push=true
          allow: |
            network.host

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image
        if: steps.build-and-push.outputs.digest != ''
        run: |
          echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes "{}@${{ steps.build-and-push.outputs.digest }}"

      - name: Cleanup untagged images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          package-type: 'container'
          delete-only-untagged-versions: true

      - name: Delete old main images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          package-type: 'container'
          min-versions-to-keep: 10
          ignore-versions: '/^v/'